(module
  (type $0 (func))
  (memory $0 0)
  (func $work (type $0)
    (local $x i32)
    (local $1 i32)
    (set_local $1
      (i32.const 0)
    )
    (loop $loop
      (set_local $x
        (get_local $1)
      )
      (if
        (i32.const 1)
        (block $block
          (set_local $1
            (i32.const 2)
          )
          (br $loop)
        )
      )
    )
  )
  (func $two (type $0)
    (local $x i32)
    (local $1 i32)
    (set_local $1
      (i32.const 0)
    )
    (loop $loop
      (set_local $x
        (get_local $1)
      )
      (block
        (if
          (i32.const 1)
          (block $block
            (set_local $1
              (i32.const 2)
            )
            (br $loop)
          )
        )
        (if
          (i32.const 3)
          (block $block1
            (set_local $1
              (i32.const 4)
            )
            (br $loop)
          )
        )
      )
    )
  )
  (func $ignore (type $0)
    (local $x i32)
    (local $1 i32)
    (set_local $1
      (i32.const 0)
    )
    (block $out
      (loop $loop
        (set_local $x
          (get_local $1)
        )
        (block
          (if
            (i32.const 1)
            (block $block
              (set_local $1
                (i32.const 2)
              )
              (br $loop)
            )
          )
          (if
            (i32.const 3)
            (block $block3
              (set_local $x
                (i32.const 4)
              )
              (br $out)
            )
          )
        )
      )
    )
  )
  (func $pair (type $0)
    (local $x i32)
    (local $y i32)
    (local $2 i32)
    (local $3 i32)
    (set_local $3
      (i32.const 0)
    )
    (set_local $2
      (i32.const -1)
    )
    (loop $loop
      (set_local $x
        (get_local $3)
      )
      (block
        (set_local $y
          (get_local $2)
        )
        (if
          (i32.const 1)
          (block $block
            (set_local $3
              (i32.const 2)
            )
            (set_local $2
              (i32.const -2)
            )
            (br $loop)
          )
        )
      )
    )
  )
  (func $pair-but-mix (type $0)
    (local $x i32)
    (local $y i32)
    (local $2 i32)
    (set_local $x
      (i32.const 0)
    )
    (set_local $2
      (i32.const -1)
    )
    (loop $loop
      (set_local $y
        (get_local $2)
      )
      (if
        (i32.const 1)
        (block $block
          (set_local $x
            (i32.const 2)
          )
          (set_local $2
            (get_local $x)
          )
          (br $loop)
        )
      )
    )
  )
  (func $boring (type $0)
    (loop $loop-in
      (nop)
    )
    (loop $loop1
      (nop)
    )
  )
  (func $not-in-all (type $0)
    (local $x i32)
    (set_local $x
      (i32.const 0)
    )
    (loop $loop
      (if
        (i32.const 1)
        (block $block
          (set_local $x
            (i32.const 2)
          )
          (br $loop)
        )
      )
      (if
        (i32.const 3)
        (block $block5
          (br $loop)
        )
      )
    )
  )
  (func $float (type $0)
    (local $x f64)
    (local $1 f64)
    (set_local $1
      (f64.const 0)
    )
    (loop $loop
      (set_local $x
        (get_local $1)
      )
      (if
        (i32.const 1)
        (block $block
          (set_local $1
            (f64.const 2)
          )
          (br $loop)
        )
      )
    )
  )
  (func $return-blocks (type $0)
    (local $x i32)
    (set_local $x
      (i32.const 0)
    )
    (loop $loop
      (if
        (i32.const 1)
        (block $block
          (set_local $x
            (i32.const 2)
          )
          (return)
          (br $loop)
        )
      )
    )
  )
  (func $unreachable-blocks (type $0)
    (local $x i32)
    (set_local $x
      (i32.const 0)
    )
    (loop $loop
      (if
        (i32.const 1)
        (block $block
          (set_local $x
            (i32.const 2)
          )
          (unreachable)
          (br $loop)
        )
      )
    )
  )
  (func $if-blocks (type $0)
    (local $x i32)
    (set_local $x
      (i32.const 0)
    )
    (loop $loop
      (if
        (i32.const 1)
        (block $block
          (set_local $x
            (i32.const 2)
          )
          (if
            (i32.const 3)
            (nop)
          )
          (br $loop)
        )
      )
    )
  )
  (func $br-blocks (type $0)
    (local $x i32)
    (set_local $x
      (i32.const 0)
    )
    (block $out
      (loop $loop
        (if
          (i32.const 1)
          (block $block
            (set_local $x
              (i32.const 2)
            )
            (br $out)
            (br $loop)
          )
        )
      )
    )
  )
  (func $other-allows (type $0)
    (local $x i32)
    (local $1 i32)
    (set_local $1
      (i32.const 0)
    )
    (loop $loop
      (set_local $x
        (get_local $1)
      )
      (if
        (i32.const 1)
        (block $block
          (set_local $1
            (i32.const 2)
          )
          (call $other-allows)
          (nop)
          (drop
            (i32.eqz
              (i32.const 3)
            )
          )
          (br $loop)
        )
      )
    )
  )
  (func $switch-ignorable (type $0)
    (local $x i32)
    (local $1 i32)
    (set_local $1
      (i32.const 0)
    )
    (block $out
      (loop $loop
        (set_local $x
          (get_local $1)
        )
        (block
          (if
            (i32.const 1)
            (block $block
              (set_local $1
                (i32.const 2)
              )
              (br $loop)
            )
          )
          (br_table $out $out
            (i32.const 3)
          )
        )
      )
    )
  )
  (func $switch-blocks1 (type $0)
    (local $x i32)
    (set_local $x
      (i32.const 0)
    )
    (block $out
      (loop $loop
        (if
          (i32.const 1)
          (block $block
            (set_local $x
              (i32.const 2)
            )
            (br $loop)
          )
        )
        (br_table $out $loop
          (i32.const 3)
        )
      )
    )
  )
  (func $switch-blocks2 (type $0)
    (local $x i32)
    (set_local $x
      (i32.const 0)
    )
    (block $out
      (loop $loop
        (if
          (i32.const 1)
          (block $block
            (set_local $x
              (i32.const 2)
            )
            (br $loop)
          )
        )
        (br_table $loop $out
          (i32.const 3)
        )
      )
    )
  )
  (func $br-if-blocks (type $0)
    (local $x i32)
    (set_local $x
      (i32.const 0)
    )
    (loop $loop
      (if
        (i32.const 1)
        (block $block
          (set_local $x
            (i32.const 2)
          )
          (br $loop)
        )
      )
      (if
        (i32.const 3)
        (block $block8
          (set_local $x
            (i32.const 4)
          )
          (br_if $loop
            (i32.const 1)
          )
        )
      )
    )
  )
)
